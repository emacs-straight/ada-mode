;;; WisiToken grammar for GNAT project files
;;
;; Author: Stephen Leake <stephe-leake@stephe-leake.org>
;; Maintainer: Stephen Leake <stephe-leake@stephe-leake.org>
;; Created: Jan 2013
;; Keywords: syntax

%code copyright_license %{
;;  Copyright (C) 2013 - 2019 Free Software Foundation, Inc.

;;  This program is free software; you can redistribute it and/or
;;  modify it under the terms of the GNU General Public License as
;;  published by the Free Software Foundation; either version 3, or (at
;;  your option) any later version.
;;
;;  This software is distributed in the hope that it will be useful,
;;  but WITHOUT ANY WARRANTY; without even the implied warranty of
;;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;;  General Public License for more details.
;;
;;  You should have received a copy of the GNU General Public License
;;  along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.
}%

%code actions spec post %{
   Partial_Parse_Active : Boolean := False;
}%

;;; Commentary:
;;
;; This is a wisi grammar file for the gpr language. It is derived
;; from the gprbuild user guide, with the following substitutions:
;;
;; simple_name -> IDENTIFIER
;;
;; and some simplifications. Repeating constructs are implemented with
;; extra productions. Optional constructs are implemented by repeated
;; productions

;; GNAT GPL 2017 (info "(gprbuild_ug) Configuration File Reference")

%token <punctuation> AMPERSAND "&"
%token <punctuation> COLON ":"
%token <punctuation> COLON_EQUALS ":="
%token <punctuation> COMMA ","
%token <punctuation> DOT "."
%token <punctuation> EQUAL_GREATER "=>"
%token <punctuation> QUOTE "'"
%token <punctuation> SEMICOLON ";"
%token <punctuation> VERTICAL_BAR "|"

%case_insensitive

%keyword ABSTRACT "abstract"
%keyword AT "at"
%keyword AGGREGATE "aggregate"
%keyword CASE "case"
%keyword CONFIGURATION "configuration"
%keyword END "end"
%keyword EXTENDS "extends"
%keyword EXTERNAL "external"
%keyword EXTERNAL_AS_LIST "external_as_list"
%keyword FOR "for"
%keyword IS "is"
%keyword LEFT_PAREN "("
%keyword LIBRARY "library"
%keyword NULL "null"
%keyword OTHERS "others"
%keyword PACKAGE "package"
%keyword PROJECT "project"
%keyword RENAMES "renames"
%keyword RIGHT_PAREN ")"
%keyword STANDARD "standard"
%keyword TYPE "type"
%keyword USE "use"
%keyword WHEN "when"
%keyword WITH "with"

%non_grammar <non-reporting> WHITESPACE %[ [ \t] ]%

;; handle DOS or Unix newline
%non_grammar <new-line> NEW_LINE %[ [\x0a]|[\x0d][\x0a] ]%

%non_grammar <comment> COMMENT %[ "--"[^\n]* ]%

%token <number> NUMERIC_LITERAL
    %[ [0-9]+ ]%
  "1234567890"

%token <symbol> IDENTIFIER
    %[ [a-zA-Z\x80-\U0010FFFF][0-9a-zA-Z_\x80-\U0010FFFF]* ]%
  "A_Bogus_Identifier"

%token <string-double> STRING_LITERAL
    %[ (["][\x20-\x21\x23-\U0010FFFF]*["])+ ]%
  '""'

%start compilation_unit

%generate LR1 Ada_Emacs re2c Process
;; LR1 gives better error correction performance.

%elisp_face font-lock-function-name-face
%elisp_face font-lock-keyword-face
%elisp_face nil

%mckenzie_cost_default 4 4 2 2
%mckenzie_enqueue_limit 10_000
%mckenzie_check_limit 3
%mckenzie_check_delta_limit 200

%end_names_optional_option End_Names_Optional

%conflict SHIFT/REDUCE in state aggregate_g, aggregate_g  on token RIGHT_PAREN
%conflict SHIFT/REDUCE in state case_statement, case_statement  on token WHEN

;; grammar rules, non-terminal alphabetical order

aggregate_g
  : LEFT_PAREN string_list RIGHT_PAREN
    %((wisi-indent-action [0 (wisi-anchored 1 1) (wisi-anchored 1 0)]))%
  ;

attribute_declaration
  : FOR IDENTIFIER USE expression SEMICOLON
    %((progn
        (wisi-statement-action [1 statement-start 5 statement-end])
        (wisi-name-action 2)
        (wisi-face-apply-action [2 nil font-lock-function-name-face])
        (wisi-indent-action [0 gpr-indent-broken 0 gpr-indent-broken 0])))%
  | FOR IDENTIFIER LEFT_PAREN discrete_choice RIGHT_PAREN USE expression SEMICOLON
    %((progn
        (wisi-statement-action [1 statement-start 8 statement-end])
        (wisi-name-action 2)
        (wisi-face-apply-action [2 nil font-lock-function-name-face])
        (wisi-indent-action [0 gpr-indent-broken (- gpr-indent-broken 1) gpr-indent-broken (- gpr-indent-broken 1) 0
                               gpr-indent-broken 0])))%
  | FOR IDENTIFIER LEFT_PAREN discrete_choice RIGHT_PAREN USE expression AT NUMERIC_LITERAL SEMICOLON
    %((progn
        (wisi-statement-action [1 statement-start 10 statement-end])
        (wisi-name-action 2)
        (wisi-face-apply-action [2 nil font-lock-function-name-face])
        (wisi-indent-action [0 gpr-indent-broken (- gpr-indent-broken 1) gpr-indent-broken (- gpr-indent-broken 1) 0
                             gpr-indent-broken 0 0 0])))%
  | FOR EXTERNAL LEFT_PAREN STRING_LITERAL RIGHT_PAREN USE expression SEMICOLON
    %((progn
        (wisi-statement-action [1 statement-start 8 statement-end])
        (wisi-indent-action [0 gpr-indent-broken (- gpr-indent-broken 1) gpr-indent-broken (- gpr-indent-broken 1) 0
                               gpr-indent-broken 0])))%
  ;

;; (info "(gprbuild_ug)Attributes")
attribute_prefix
  : PROJECT
  ;; not a keyword; no face
  | name
  ;

attribute_reference
  : attribute_prefix QUOTE IDENTIFIER
  | attribute_prefix QUOTE IDENTIFIER LEFT_PAREN STRING_LITERAL RIGHT_PAREN
  ;

;; (info "(gprbuild_ug)Case Statements")
case_statement
  : CASE name IS case_items END CASE SEMICOLON
    %((progn
        (wisi-statement-action [1 statement-start 7 statement-end])
        (wisi-indent-action [0 gpr-indent-broken 0 [gpr-indent-when gpr-indent-when] 0 0 0])))%
  ;

;; declarations allowed in a case statement are a subset of
;; declarative_items, but this simplifies the grammar.
case_item
  : WHEN discrete_choice_list EQUAL_GREATER declarative_items_opt
    %((progn
        (wisi-statement-action [1 motion])
        (wisi-indent-action [0 gpr-indent-broken gpr-indent gpr-indent])))%
  ;

case_items
  : ;; empty
  | case_item
  | case_items case_item
  ;

;; Compute indent for trailing comments.
compilation_unit
  : context_clause_opt project_qualifier_opt project_declaration_opt
    %((wisi-indent-action [0 0 [0 0]]))%
  ;

context_clause
  : with_clause
  | context_clause with_clause
  ;

context_clause_opt
  : ;; empty
  | context_clause
  ;

;; (info "(gprbuild_ug)Declarations")
declarative_item
  : simple_declarative_item
  | typed_string_declaration
  | package_declaration
  ;

declarative_items
  : declarative_item
  | declarative_items declarative_item
  ;

declarative_items_opt
  : ;; empty
  | declarative_items
  ;

discrete_choice
  : ;; empty
  | STRING_LITERAL
  | OTHERS
  ;

discrete_choice_list
  : discrete_choice
  | discrete_choice_list VERTICAL_BAR discrete_choice
  ;

;; (info "(gprbuild_ug)Expressions")
expression
  : term
  | expression AMPERSAND term
  ;

external_value
  : EXTERNAL aggregate_g
  | EXTERNAL_AS_LIST aggregate_g
  ;

identifier_opt
  : ;; empty
  | IDENTIFIER
    %()%
    %((wisi-propagate-name 1))%
  ;

name
  : identifier_opt
  | name DOT IDENTIFIER
  ;

;; (info "(gprbuild_ug)Packages")
package_declaration
  : package_spec
  | package_extension
  | package_renaming
  ;

package_spec
  : PACKAGE identifier_opt IS declarative_items_opt END identifier_opt SEMICOLON
    %((progn
        (wisi-statement-action [1 statement-start 7 statement-end])
        (wisi-name-action 2)
        (wisi-face-apply-action [2 nil font-lock-function-name-face 6 nil font-lock-function-name-face])
        (wisi-indent-action [0 gpr-indent-broken 0 [gpr-indent gpr-indent] 0 0 0])))%
    %((wisi-match-names 2 6))%
  ;

package_extension
  : PACKAGE identifier_opt EXTENDS name IS declarative_items_opt END identifier_opt SEMICOLON
    %((progn
        (wisi-statement-action [1 statement-start 9 statement-end])
        (wisi-name-action 2)
        (wisi-face-apply-action [2 nil font-lock-function-name-face 8 nil font-lock-function-name-face])
        (wisi-indent-action [0 gpr-indent-broken 0 gpr-indent-broken 0 [gpr-indent gpr-indent] 0 0 0])))%
    %((wisi-match-names 2 8))%
  ;

package_renaming
  : PACKAGE identifier_opt RENAMES name SEMICOLON
    %((progn
        (wisi-statement-action [1 statement-start 5 statement-end])
        (wisi-face-apply-action [2 nil font-lock-function-name-face 4 nil font-lock-function-name-face])))%
  ;

project_declaration_opt
  : ;; empty
  | simple_project_declaration
  | project_extension
  ;

project_extension
  : PROJECT identifier_opt EXTENDS STRING_LITERAL IS declarative_items_opt END identifier_opt SEMICOLON
    %((progn
        (wisi-statement-action [1 statement-start 9 statement-end])
        (wisi-name-action 2)
        (wisi-face-apply-action [1 nil font-lock-keyword-face 2 nil font-lock-function-name-face 8 nil font-lock-function-name-face])
        (wisi-indent-action [0 gpr-indent-broken 0 gpr-indent-broken 0 [gpr-indent gpr-indent] 0 0 0])))%
    %((wisi-match-names 2 8))%
  ;

;; (info "(gprbuild_ug)Qualified Projects")
project_qualifier_opt
  : ;; empty
  | ABSTRACT
  | STANDARD
  | AGGREGATE
  | AGGREGATE LIBRARY
  | LIBRARY
  | CONFIGURATION
  ;

;; (info "(gprbuild_ug)Declarations" "*info gpr*")
simple_declarative_item
  : IDENTIFIER COLON_EQUALS expression SEMICOLON ;; variable_declaration
    %((progn
        (wisi-statement-action [1 statement-start 4 statement-end])
        (wisi-indent-action [0 gpr-indent-broken gpr-indent-broken 0])))%
  | IDENTIFIER COLON IDENTIFIER COLON_EQUALS expression SEMICOLON ;; typed_variable_declaration
    %((progn
        (wisi-statement-action [1 statement-start 6 statement-end])
        (wisi-indent-action [0 gpr-indent-broken gpr-indent-broken gpr-indent-broken gpr-indent-broken 0])))%
  | attribute_declaration
  | case_statement
  | NULL SEMICOLON
    %((wisi-statement-action [1 statement-start 2 statement-end]))%
  ;

simple_project_declaration
  : PROJECT identifier_opt IS declarative_items_opt END identifier_opt SEMICOLON
    %((progn
        (wisi-statement-action [1 statement-start 7 statement-end])
        (wisi-name-action 2)
        (wisi-face-apply-action [1 nil font-lock-keyword-face
                                   2 nil font-lock-function-name-face
                                   6 nil font-lock-function-name-face])
        (wisi-indent-action [0 gpr-indent-broken 0 [gpr-indent gpr-indent] 0 0 0])))%
    %((wisi-match-names 2 6))%
  ;

;; (info "(gprbuild_ug)Expressions")
string_primary
  : STRING_LITERAL
  | name;; variable_name
  | external_value
  | attribute_reference
  ;

;; (info "(gprbuild_ug)Expressions")
;; we merge that string_list into term, and use 'string_list' for 'string_expression {, string_expression}'
string_list
  : expression
  | string_list COMMA expression
  ;

;; see string_list for info reference
;; string_variable_name covered by string_primary
term
  : string_primary
  | LEFT_PAREN RIGHT_PAREN
  | aggregate_g
  ;

typed_string_declaration
  : TYPE IDENTIFIER IS aggregate_g SEMICOLON
    %((progn
        (wisi-statement-action [1 statement-start 5 statement-end])
        (wisi-indent-action [0 gpr-indent-broken gpr-indent-broken gpr-indent-broken 0])))%
  ;

with_clause
  : WITH string_list SEMICOLON
  ;

;;; end of file
